library std;
use std.standard.all;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity rf is 
	port(
			 rfa1, rfa2, rfa3   : in std_logic_vector(2 DOWNTO 0);
			 --m : in std_logic_vector(2 downto 0);
			 rst : in std_logic; -- async. clear.
			 clk : in std_logic; -- clock.
			 rfwr  : in std_logic; -- write
			 pr5invalid : in std_logic; -- enable for register 7
			 newpc, rfd3 : in std_logic_vector(15 downto 0);
			 rfd1,rfd2 : out std_logic_vector(15 DOWNTO 0)); -- output
end rf;

architecture behave of rf is

--component R7 is 
--	port(
--			 alu_out, t2_out, PC_out, t3_out, rfd3  : in std_logic_vector(15 DOWNTO 0);
--			 m : in std_logic_vector(2 downto 0);
--			 rst : in std_logic; -- async. clear.
--			 clk : in std_logic; -- clock.
--			 wr  : in std_logic; -- write
--			 q : out std_logic_vector(15 downto 0) );
--end component;


component Reg16 is 
	port(
		 d   : in std_logic_vector(15 DOWNTO 0);
		 en  : in std_logic; -- load/enable.
		 rst : in std_logic; -- async. clear.
		 clk : in std_logic; -- clock.
		 q   : out std_logic_vector(15 DOWNTO 0)); -- output
end component;

type registerFile is array(0 to 7) of std_logic_vector(15 downto 0);
signal registers : registerFile;
type bitarr is array(0 to 7) of std_logic;
signal wr_rf : std_logic;
signal wrarr1 : bitarr := "00000000";

begin

inst_reg : for i in 0 to 7 generate
R: Reg port map (d => rfd3, en => wrarr1(i), rst => rst, clk => clk, q => registers(i));
end generate inst_reg;

wr_rf <= (rfwr and (not(pr5invalid)); 


reg_file : process (clk, rst, wr_rf,rfa3,rfa1,rfa2)
	variable wrarr_temp : bitarr := "00000000";
	variable rfd1_var, rfd2_var : std_logic_vector(15 downto 0) 

	begin	
		
		if wr_rf = '1' then
			wrarr_temp := (others =>'0');
			wrarr_temp(to_integer(unsigned(rfa3))) := '1';
			rfd1_var := (others => '0');
			rfd2_var ;= (others => '0');
			
		
		else 
			wrarr_temp := (others =>'0');

			if rfa1 = rfa3 then
				rfd1_var := rfd3;
			else
				rfd1_var := registers(to_integer(unsigned(rfa1)));	
			end if ;
			
			if rfa2 = rfa3 then
				rfd2_var := rfd3;
			else
				rfd2_var := registers(to_integer(unsigned(rfa2)));	
			end if ;
			
		wrarr_temp := wrarr_temp or (not(pr5invalid));

		end if;
		
		wrarr1 <= wrarr_temp;
		rfd1 <= rfd1_var;
		rfd2 <= rfd2_var;


	end process reg_file;
end behave;